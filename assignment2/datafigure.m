input = importdata('optdigitsubset.txt');
% real lable for data
label = [0*ones(554, 1); 1*ones(571, 1)];
traininglabel = [0*ones(50, 1); 1*ones(50, 1)];
testlabel = [0*ones(504, 1); 1*ones(521, 1)];
% training dataset
N = prdataset([input(1:50,:);input(555:604, :)], traininglabel);
D = (1/100)*ones(1,100);
% weight = (1/1025)*ones(150, 1025);
% testing dataset
data = [input(51: 554, :); input(605: 1125, :)];

% w = zeros(150, 26); 
wt = zeros(100, 100);
for T = 1: 100
    [~ , e, weight, oy, ot, of] = AdaBoost(N, D, T);
    H = zeros(T, 1025);
    wt(T,:) = weight;
    for i = 1:T
        %p = weight(T, :)/sum(weight(T, :));
        if (oy(i) == 1)
        for m = 1:1025
            if (data(m, of(i)) > ot(i))
                H(i, m) = 1;
            else
                H(i, m) = 0;
            end
        end
        else
            for m = 1:1025
            if (data(m, of(i)) < ot(i))
                H(i, m) = 1;
            else
                H(i, m) = 0;
            end
           end
        end
        % calculate the error of ht
    ee(i) = e(T, 1);
    beta(i) = ee(i)/(1-ee(i)); % set beta
    % set the weight vecot
%     power = 1 - abs(H(i, :)- testlabel');
%     for n = 1:1025
%         weight(T, n) = beta(i)^power(n) * weight(T, n);
%     end
    
    output1(i, :) = log(1/beta(i))*H(i,:);
    output2(i, :) = 0.5*log(1/beta(i));
    end
    
    h1 = sum(output1);
    h2 = sum(output2);
    % output hypothesis
    hypothesis = h1 >= h2;
    
    wrong = hypothesis~=testlabel'; % index of wrong objects
%     [b, in] = sort(weight(T, :));
%     w(T,:) = in(1, 1000:1025); % 26 objects with higher weight
    error(T) = sum(wrong); % error 
end
%error = error/1025;
index = find(error==min(error));

figure
plot(error)
xlabel('T')
ylabel('Classification error')
title('Error change with T')
% 
% figure
% stem(wt(17, :))
% xlabel('index of objects')
% ylabel('weight')
 



% N = gendats;
% label = [0*ones(50, 1); 1*ones(50, 1)];
% N = prdataset(N.data, label);
% data = N.data;
% figure
% plot(data(1:50, 1), data(1:50, 2),  'b.', 'MarkerSize', 10)
% hold on
% plot(data(51:100, 1), data(51:100, 2),  'r.', 'MarkerSize', 10)
% xlabel('feature 1')
% ylabel('feature 2')
% title('Scatterplot of the gendats')
% hold off
% 
% [x, y] = size(N.data);
% D = (1/x)*ones(1,100);
% T = 100;
% [hypothesis, e, weight] = AdaBoost(N, D, T);
% wrong = hypothesis~=label';
% error = sum(wrong);
% 
% figure
% plot(data(find(hypothesis==0), 1), data(find(hypothesis==0), 2), 'b.', 'MarkerSize', 10)
% hold on
% plot(data(find(hypothesis==1), 1), data(find(hypothesis==1), 2), 'r.', 'MarkerSize', 10)
% plot(data(in, 1), data(in, 2), 'ko', 'MarkerSize', 11)
% plot(data(find(wrong==1), 1), data(find(wrong==1), 2), 'go', 'MarkerSize', 12)
% xlabel('feature 1')
% ylabel('feature 2')
% title('Scatterplot of the classified gendats')
% legend('objects in class 0', 'objects in class 1', '10 objects with larger weight', 'wrong objects')
% hold off

% figure
% plot(e)
% xlabel('time of iteration')
% ylabel('error')


% N = gendatb([50 50], 1);
% label = [0*ones(50, 1); 1*ones(50, 1)];
% N = prdataset(N.data, label);
% [x, y] = size(N.data);
% data = N.data;
% figure
% plot(data(1:50, 1), data(1:50, 2), 'b.', 'MarkerSize', 10)
% hold on
% plot(data(51:100, 1), data(51:100, 2), 'r.', 'MarkerSize', 10)
% xlabel('feature 1')
% ylabel('feature 2')
% title('Scatterplot of the gendatb')
% hold off
% 
% D = (1/x)*ones(1,100);
% T = 100;
% [hypothesis, e, weight] = AdaBoost(N, D, T);
% 
% wrong = hypothesis~=label';
% error = sum(wrong);
% 
% [b, in] = sort(weight);
% in = in(1, 91:100);
% figure
% plot(data(find(hypothesis==0), 1), data(find(hypothesis==0), 2), 'b.', 'MarkerSize', 10)
% hold on
% plot(data(find(hypothesis==1), 1), data(find(hypothesis==1), 2), 'r.', 'MarkerSize', 10)
% plot(data(in, 1), data(in, 2), 'ko', 'MarkerSize', 12)
% plot(data(find(wrong==1), 1), data(find(wrong==1), 2), 'go', 'MarkerSize', 12)
% xlabel('feature 1')
% ylabel('feature 2')
% title('Scatterplot of the classified gendatb')
% legend('objects in class 0', 'objects in class 1', '10 objects with larger weight', 'wrong objects')
% hold off

% 
% 
% figure
% plot(e)
% xlabel('time of iteration')
% ylabel('error')







% A = gendats;
% weight1 = 1:100;
% [oy1, ot1, of1] = weaklearner(A, weight1);
% weight2 = fliplr(weight1);
% [oy2, ot2, of2] = weaklearner(A, weight2);
% figure
% plot(A.data(1:50, 1), A.data(1:50, 2), 'b*')
% hold on
% plot(A.data(51:100, 1), A.data(51:100, 2), 'r*')
% if (of1 == 1)
%     plot([ot1 ot1], [-5 5])
% end
% if (of1 == 2)
%     plot([-5 5], [ot1 ot1])
% end
% if (of2 == 1)
%     plot([ot2 ot2], [-5 5])
% end
% if (of2 == 2)
%     plot([-5 5], [ot2 ot2])
% end
% title('Scatterplot of data generated by gendats')
% legend('data in class one', 'data in class two', 'the thershold 1', 'the thershold 2')
% xlabel('feature 1')
% ylabel('feature 2')
% hold off



% input = importdata('optdigitsubset.txt');
% % real lable for data
% reallabel = [0*ones(554, 1); 1*ones(571, 1)];
% traininglabel = [0*ones(50, 1); 1*ones(50, 1)];
% testlabel = [0*ones(504, 1); 1*ones(521, 1)];
% X = prdataset(input, reallabel);
% e = zeros(1,500); % initial error
% % start 500 times testing
% for i = 1:500
%     data = [X.data(i:i+49,:); X.data(554+i:603+i,:)];
%     data = prdataset(data, traininglabel);
%     [oy, ot, of] = weaklearner(data);
%     testdata = X.data;
%     testdata(i:i+49,:)=[];
%     testdata(504+i:553+i,:)=[];
%     [x, y] = size(testdata);
%     label = zeros(x,1);
%     for m = 1:x
%       if(testdata(m,of) > ot)
%          label(m) = 1;
%       else
%          label(m) = 0;
%       end
%     end
%     e(1, i) = sum(abs(label-testlabel));
% end
% % calculate mean and standard deviation of the error
% e_mean = mean(e);
% e_std = std(e);

input = importdata('optdigitsubset.txt');
% real lable for data
reallabel = [0*ones(554, 1); 1*ones(571, 1)];
trainlabel = [0*ones(50, 1); 1*ones(50, 1)];
testlabel = [0*ones(504, 1); 1*ones(521, 1)];
class0 = input(1:554, :); % data for class 0
class1 = input(555:1125, :); % data for class 1
error = zeros(500, 1);
for i = 1: 500
    a = randperm(554); % randomly choose 50 data from class 0 
    index0 = a(1:50);
    b = randperm(571); % randomly choose 50 data from class 0 
    index1 = b(1:50);
    traindata = [];
    testdata = [];
    % group test data and training data
    for m = 1: 554
        if (ismember(m, index0))
            traindata = [traindata ; class0(m, :)];
        else
            testdata = [testdata; class0(m, :)];
        end
    end
    for n = 1: 571
        if (ismember(n, index1))
            traindata = [traindata; class1(n, :)];
        else
            testdata = [testdata; class1(n, :)];
        end
    end
   
    traindataset = prdataset(traindata, trainlabel);
    [oy, ot, of] = weaklearner(traindataset); % call weaklearner
    class = 2*ones(1025,1);
    % classify test data 
    for k = 1:1025
        if(oy == 1)
            if(testdata(k, of) > ot)
                class(k) = 1;
            else
                class(k) = 0;
            end
        else
             if(testdata(k, of) < ot)
                class(k) = 1;
            else
                class(k) = 0;
            end
        end
    end
    % calculate error
    wrong = class ~= testlabel;
    error(i) = sum(wrong);
    
end

e_mean = mean(error/1025);
e_std = std(error/1025);

stem(error)
xlabel('time of attampts')
ylabel('error')


% data = [X(1:50,:); X(555:604,:)];
% [oy1, ot1, of1] = weaklearner(data);
% testdata = [X(51:554,:);X(605:1125,:)];
% [x, y] = size(testdata);
% reallabel = [0*ones(1, 504), 1*ones(1, 521)];
% label = zeros(1, x);
% for i = 1:x
%     if(testdata(i,37)>23.75)
%         label(1, i) = 1;
%     else
%         label(1, i) = 0;
%     end
% end
% e = sum(abs(label-reallabel));

        
% A = gendats;
% data = getdata(A);
% [oy1, ot1, of1] = weaklearner(data);
% data1 = [10*data(:,1) data(:,2)];
% [oy,ot, of] = weaklearner(data1);
% data2 = [data(:,1) 10*data(:,2)];
% [oy2,ot2,of2] = weaklearner(data2);
% figure
% plot(data(1:50, 1), data(1:50, 2), 'b*')
% hold on
% plot(data(51:100, 1), data(51:100, 2), 'r*')
% if (of == 1)
%     plot([ot ot], [-5 5])
% end
% if (of == 2)
%     plot([-5 5], [ot ot])
% end
% title('Scatterplot of data generated by gendats')
% legend('data in class one', 'data in class two', 'the thershold')
% xlabel('feature 1')
% ylabel('feature 2')
% hold off
    